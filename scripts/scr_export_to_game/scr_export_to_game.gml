

var _buff = buffer_create(104857600, buffer_grow, 1) //create a 100 MB buffer, this will likely not all be used

buffer_write(_buff, buffer_text, "//THIS IS AN AUTOGENERATED SCRIPT, IT MAY ALSO CHANGE AT ANY TIME\n\n")

var i, o, j, k, l, _table, _list, _list_name;

_list = obj_data.hurtbox_list
_list_name = "hurtbox_list"
repeat(2) { //hurtboxes, then hitboxes
	buffer_write(_buff, buffer_text, "global." + _list_name + " = [\n")
	for (j = 0; j < array_length_1d(_list); j++) { //each character
		_table = _list[j] //get the array
		for (i = 0; i < array_height_2d(_table)/10 - 1; i++) { //for each sprite
			buffer_write(_buff, buffer_text, "\t[ //" + string(obj_data.sprite_array[i + _table[0, 0], NAME]) + " \n")
			for (o = 0; o < array_length_2d(_table, i)/25; o++) { //for each frame
				//check for break
				if (_table[i*10, o*25] = -10) { //if the first data point of the first hitbox is null
					//end this loop
					break;
				}
				buffer_write(_buff, buffer_text, "\t\t[ //frame " + string(o) + "\n")
				for (k = 0; k < 10; k++) { //for each hitbox
					//check for break
					if (_table[i*10 + k, o*25] = -10) { //if the first data point of the hitbox is null
						//end this loop
						break;
					}
					buffer_write(_buff, buffer_text, "\t\t\t[")
					for (l = 0; l < 25; l++) { //for each data point
						buffer_write(_buff, buffer_text, string(_table[i*10 + k, o*25 + l]) + ",")
					}
					//replace last , with ], newline
					buffer_seek(_buff, buffer_seek_relative, -1)
					buffer_write(_buff, buffer_text, "],\n")
				}
				//replace last ], newline with ] newline
				buffer_seek(_buff, buffer_seek_relative, -2)
				buffer_write(_buff, buffer_text, "\n\t\t],\n")
			}
			//replace last ], newline with ] newline
			buffer_seek(_buff, buffer_seek_relative, -2)
			buffer_write(_buff, buffer_text, "\n")
			//write the end of the sprite
			buffer_write(_buff, buffer_text, "\t],\n") 
		}
		
	}
	//replace last ], newline with ] newline for end of sprites
	buffer_seek(_buff, buffer_seek_relative, -2)
	buffer_write(_buff, buffer_text, "\n]\n\n")
	_list = obj_data.hitbox_list //change which list
	_list_name = "hitbox_list"
}

buffer_write(_buff, buffer_string, "") //write null terminator

show_debug_message(buffer_tell(_buff)) //output size of buffer

backup = buffer_save_async(_buff, "Output_Buffer.buff", 0, buffer_tell(_buff)); //save to local backup
//output = buffer_save_async(_buff, global.output_file, 0, buffer_tell(_buff)); //save to final desitination


/* FORMAT
[ //sprite
	[ //frame
		[1, 2, 3, 4, 5 ...data....],
		[1, 2, 3, 4, 5 ...data....],
		[1, 2, 3, 4, 5 ...data....],
		[1, 2, 3, 4, 5 ...data....]
	],
	[ //frame
		[1, 2, 3, 4, 5 ...data....],
		[1, 2, 3, 4, 5 ...data....],
		[1, 2, 3, 4, 5 ...data....],
		[1, 2, 3, 4, 5 ...data....]
	],
	[ //frame
		[1, 2, 3, 4, 5 ...data....],
		[1, 2, 3, 4, 5 ...data....],
		[1, 2, 3, 4, 5 ...data....],
		[1, 2, 3, 4, 5 ...data....]
	]
]



old system
global.hitbox
[32000 sprites, 319 frames + 9 hitboxes + 11 entries]
[sprite_index, image_index*100 + index*11 + entry]

new system
global.hitbox_list[hitbox and hurtbox arrays]
global.hitbox_bal
[3200 sprites + 10 hitboxes, 1280 frames + 25 entries]

new new system

global.hitbox[sprite][frame][hitbox][data]

//*/